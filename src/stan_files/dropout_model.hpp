/*
    malacoda is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    malacoda is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with malacoda.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_dropout_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dropout_model");
    reader.add_event(60, 58, "end", "model_dropout_model");
    return reader;
}

#include <meta_header.hpp>
 class model_dropout_model : public prob_grad {
private:
    int n_grna;
    int n_in;
    int n_out;
    vector<vector<int> > in_counts;
    vector<vector<int> > out_counts;
    vector<double> in_depths;
    vector<double> out_depths;
    double in_mean_a;
    double in_mean_b;
    double in_size_a;
    double in_size_b;
    double out_mean_a;
    double out_mean_b;
    double out_size_a;
    double out_size_b;
public:
    model_dropout_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_dropout_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_dropout_model_namespace::model_dropout_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_grna", "int", context__.to_vec());
            n_grna = int(0);
            vals_i__ = context__.vals_i("n_grna");
            pos__ = 0;
            n_grna = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_in", "int", context__.to_vec());
            n_in = int(0);
            vals_i__ = context__.vals_i("n_in");
            pos__ = 0;
            n_in = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_out", "int", context__.to_vec());
            n_out = int(0);
            vals_i__ = context__.vals_i("n_out");
            pos__ = 0;
            n_out = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("in_counts", "n_grna", n_grna);
            validate_non_negative_index("in_counts", "n_in", n_in);
            context__.validate_dims("data initialization", "in_counts", "int", context__.to_vec(n_grna,n_in));
            validate_non_negative_index("in_counts", "n_grna", n_grna);
            validate_non_negative_index("in_counts", "n_in", n_in);
            in_counts = std::vector<std::vector<int> >(n_grna,std::vector<int>(n_in,int(0)));
            vals_i__ = context__.vals_i("in_counts");
            pos__ = 0;
            size_t in_counts_limit_1__ = n_in;
            for (size_t i_1__ = 0; i_1__ < in_counts_limit_1__; ++i_1__) {
                size_t in_counts_limit_0__ = n_grna;
                for (size_t i_0__ = 0; i_0__ < in_counts_limit_0__; ++i_0__) {
                    in_counts[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("out_counts", "n_grna", n_grna);
            validate_non_negative_index("out_counts", "n_out", n_out);
            context__.validate_dims("data initialization", "out_counts", "int", context__.to_vec(n_grna,n_out));
            validate_non_negative_index("out_counts", "n_grna", n_grna);
            validate_non_negative_index("out_counts", "n_out", n_out);
            out_counts = std::vector<std::vector<int> >(n_grna,std::vector<int>(n_out,int(0)));
            vals_i__ = context__.vals_i("out_counts");
            pos__ = 0;
            size_t out_counts_limit_1__ = n_out;
            for (size_t i_1__ = 0; i_1__ < out_counts_limit_1__; ++i_1__) {
                size_t out_counts_limit_0__ = n_grna;
                for (size_t i_0__ = 0; i_0__ < out_counts_limit_0__; ++i_0__) {
                    out_counts[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("in_depths", "n_in", n_in);
            context__.validate_dims("data initialization", "in_depths", "double", context__.to_vec(n_in));
            validate_non_negative_index("in_depths", "n_in", n_in);
            in_depths = std::vector<double>(n_in,double(0));
            vals_r__ = context__.vals_r("in_depths");
            pos__ = 0;
            size_t in_depths_limit_0__ = n_in;
            for (size_t i_0__ = 0; i_0__ < in_depths_limit_0__; ++i_0__) {
                in_depths[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("out_depths", "n_out", n_out);
            context__.validate_dims("data initialization", "out_depths", "double", context__.to_vec(n_out));
            validate_non_negative_index("out_depths", "n_out", n_out);
            out_depths = std::vector<double>(n_out,double(0));
            vals_r__ = context__.vals_r("out_depths");
            pos__ = 0;
            size_t out_depths_limit_0__ = n_out;
            for (size_t i_0__ = 0; i_0__ < out_depths_limit_0__; ++i_0__) {
                out_depths[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "in_mean_a", "double", context__.to_vec());
            in_mean_a = double(0);
            vals_r__ = context__.vals_r("in_mean_a");
            pos__ = 0;
            in_mean_a = vals_r__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "in_mean_b", "double", context__.to_vec());
            in_mean_b = double(0);
            vals_r__ = context__.vals_r("in_mean_b");
            pos__ = 0;
            in_mean_b = vals_r__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "in_size_a", "double", context__.to_vec());
            in_size_a = double(0);
            vals_r__ = context__.vals_r("in_size_a");
            pos__ = 0;
            in_size_a = vals_r__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "in_size_b", "double", context__.to_vec());
            in_size_b = double(0);
            vals_r__ = context__.vals_r("in_size_b");
            pos__ = 0;
            in_size_b = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "out_mean_a", "double", context__.to_vec());
            out_mean_a = double(0);
            vals_r__ = context__.vals_r("out_mean_a");
            pos__ = 0;
            out_mean_a = vals_r__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "out_mean_b", "double", context__.to_vec());
            out_mean_b = double(0);
            vals_r__ = context__.vals_r("out_mean_b");
            pos__ = 0;
            out_mean_b = vals_r__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "out_size_a", "double", context__.to_vec());
            out_size_a = double(0);
            vals_r__ = context__.vals_r("out_size_a");
            pos__ = 0;
            out_size_a = vals_r__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "out_size_b", "double", context__.to_vec());
            out_size_b = double(0);
            vals_r__ = context__.vals_r("out_size_b");
            pos__ = 0;
            out_size_b = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"n_grna",n_grna,0);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"n_in",n_in,0);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"n_out",n_out,0);
            current_statement_begin__ = 6;
            for (int k0__ = 0; k0__ < n_grna; ++k0__) {
                for (int k1__ = 0; k1__ < n_in; ++k1__) {
                    check_greater_or_equal(function__,"in_counts[k0__][k1__]",in_counts[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < n_grna; ++k0__) {
                for (int k1__ = 0; k1__ < n_out; ++k1__) {
                    check_greater_or_equal(function__,"out_counts[k0__][k1__]",out_counts[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < n_in; ++k0__) {
                check_greater_or_equal(function__,"in_depths[k0__]",in_depths[k0__],0);
            }
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < n_out; ++k0__) {
                check_greater_or_equal(function__,"out_depths[k0__]",out_depths[k0__],0);
            }
            current_statement_begin__ = 18;
            check_greater_or_equal(function__,"in_mean_a",in_mean_a,0);
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"in_mean_b",in_mean_b,0);
            current_statement_begin__ = 20;
            check_greater_or_equal(function__,"in_size_a",in_size_a,0);
            current_statement_begin__ = 21;
            check_greater_or_equal(function__,"in_size_b",in_size_b,0);
            current_statement_begin__ = 23;
            check_greater_or_equal(function__,"out_mean_a",out_mean_a,0);
            current_statement_begin__ = 24;
            check_greater_or_equal(function__,"out_mean_b",out_mean_b,0);
            current_statement_begin__ = 25;
            check_greater_or_equal(function__,"out_size_a",out_size_a,0);
            current_statement_begin__ = 26;
            check_greater_or_equal(function__,"out_size_b",out_size_b,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 30;
            validate_non_negative_index("in_mean", "n_grna", n_grna);
            num_params_r__ += n_grna;
            current_statement_begin__ = 31;
            ++num_params_r__;
            current_statement_begin__ = 32;
            ++num_params_r__;
            current_statement_begin__ = 33;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_dropout_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("in_mean")))
            throw std::runtime_error("variable in_mean missing");
        vals_r__ = context__.vals_r("in_mean");
        pos__ = 0U;
        validate_non_negative_index("in_mean", "n_grna", n_grna);
        context__.validate_dims("initialization", "in_mean", "double", context__.to_vec(n_grna));
        std::vector<double> in_mean(n_grna,double(0));
        for (int i0__ = 0U; i0__ < n_grna; ++i0__)
            in_mean[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_grna; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,in_mean[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable in_mean: ") + e.what());
        }

        if (!(context__.contains_r("in_size")))
            throw std::runtime_error("variable in_size missing");
        vals_r__ = context__.vals_r("in_size");
        pos__ = 0U;
        context__.validate_dims("initialization", "in_size", "double", context__.to_vec());
        double in_size(0);
        in_size = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,in_size);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable in_size: ") + e.what());
        }

        if (!(context__.contains_r("out_mean")))
            throw std::runtime_error("variable out_mean missing");
        vals_r__ = context__.vals_r("out_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "out_mean", "double", context__.to_vec());
        double out_mean(0);
        out_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,out_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable out_mean: ") + e.what());
        }

        if (!(context__.contains_r("out_size")))
            throw std::runtime_error("variable out_size missing");
        vals_r__ = context__.vals_r("out_size");
        pos__ = 0U;
        context__.validate_dims("initialization", "out_size", "double", context__.to_vec());
        double out_size(0);
        out_size = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,out_size);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable out_size: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> in_mean;
            size_t dim_in_mean_0__ = n_grna;
            in_mean.reserve(dim_in_mean_0__);
            for (size_t k_0__ = 0; k_0__ < dim_in_mean_0__; ++k_0__) {
                if (jacobian__)
                    in_mean.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    in_mean.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ in_size;
            (void) in_size;  // dummy to suppress unused var warning
            if (jacobian__)
                in_size = in__.scalar_lb_constrain(0,lp__);
            else
                in_size = in__.scalar_lb_constrain(0);

            local_scalar_t__ out_mean;
            (void) out_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                out_mean = in__.scalar_lb_constrain(0,lp__);
            else
                out_mean = in__.scalar_lb_constrain(0);

            local_scalar_t__ out_size;
            (void) out_size;  // dummy to suppress unused var warning
            if (jacobian__)
                out_size = in__.scalar_lb_constrain(0,lp__);
            else
                out_size = in__.scalar_lb_constrain(0);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 39;
            for (int g = 1; g <= n_grna; ++g) {

                current_statement_begin__ = 40;
                lp_accum__.add(gamma_log<propto__>(get_base1(in_mean,g,"in_mean",1), in_mean_a, in_mean_b));
            }
            current_statement_begin__ = 42;
            lp_accum__.add(gamma_log<propto__>(in_size, in_size_a, in_size_b));
            current_statement_begin__ = 43;
            lp_accum__.add(gamma_log<propto__>(out_mean, out_mean_a, out_mean_b));
            current_statement_begin__ = 44;
            lp_accum__.add(gamma_log<propto__>(out_size, out_size_a, out_size_b));
            current_statement_begin__ = 47;
            for (int s = 1; s <= n_in; ++s) {

                current_statement_begin__ = 48;
                for (int g = 1; g <= n_grna; ++g) {

                    current_statement_begin__ = 49;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(in_counts,g,"in_counts",1),s,"in_counts",2), (get_base1(in_mean,g,"in_mean",1) * get_base1(in_depths,s,"in_depths",1)), in_size));
                }
            }
            current_statement_begin__ = 53;
            for (int s = 1; s <= n_out; ++s) {

                current_statement_begin__ = 54;
                for (int g = 1; g <= n_grna; ++g) {

                    current_statement_begin__ = 55;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(out_counts,g,"out_counts",1),s,"out_counts",2), ((get_base1(in_mean,g,"in_mean",1) * get_base1(out_depths,s,"out_depths",1)) * out_mean), out_size));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("in_mean");
        names__.push_back("in_size");
        names__.push_back("out_mean");
        names__.push_back("out_size");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_grna);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_dropout_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> in_mean;
        size_t dim_in_mean_0__ = n_grna;
        for (size_t k_0__ = 0; k_0__ < dim_in_mean_0__; ++k_0__) {
            in_mean.push_back(in__.scalar_lb_constrain(0));
        }
        double in_size = in__.scalar_lb_constrain(0);
        double out_mean = in__.scalar_lb_constrain(0);
        double out_size = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < n_grna; ++k_0__) {
            vars__.push_back(in_mean[k_0__]);
            }
        vars__.push_back(in_size);
        vars__.push_back(out_mean);
        vars__.push_back(out_size);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dropout_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_grna; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "in_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "in_size";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "out_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "out_size";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_grna; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "in_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "in_size";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "out_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "out_size";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_dropout_model_namespace::model_dropout_model stan_model;


#endif
